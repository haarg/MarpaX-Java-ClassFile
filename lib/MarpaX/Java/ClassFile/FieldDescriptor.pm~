use strict;
use warnings FATAL => 'all';

package MarpaX::Java::ClassFile::FieldDescriptor;

# ABSTRACT: Java .class's field_info's descriptor parsing

# VERSION

# AUTHORITY

use Moo;

use Data::Section -setup;
use Marpa::R2;
use MarpaX::Java::ClassFile::Common::BNF qw/bnf/;

=head1 DESCRIPTION

MarpaX::Java::ClassFile::FieldDescriptor is an internal class used by L<MarpaX::Java::ClassFile>, please refer to the later.

=cut

my $_data      = ${__PACKAGE__->section_data('bnf')};
my $_grammar   = Marpa::R2::Scanless::G->new({source => \__PACKAGE__->bnf($_data)});
my %_CALLBACKS = ('fieldDescriptor$' => \&_fieldDescriptorCallback);

# ----------------------------------------------------------------
# What role MarpaX::Java::ClassFile::Common::InnerGrammar requires
# ----------------------------------------------------------------
sub grammar   { $_grammar }
sub callbacks { \%_CALLBACKS }

# ---------------
# Event callbacks
# ---------------
sub _fieldDescriptorCallback {
  my ($self) = @_;
  $self->_nbDone($self->_nbDone + 1);
  $self->debugf('Completed');
  $self->max($self->pos) if ($self->_nbDone >= $self->size);
}

# --------------------
# Our grammar actions
# --------------------
sub _fieldDescriptor {
  bless({FieldTypes => $_[1]}, 'FieldDescriptor')
}

with qw/MarpaX::Java::ClassFile::Common::InnerGrammar/;

1;

__DATA__
__[ bnf ]__
:default ::= action => ::first
event 'fieldInfo$'       = completed fieldInfo
event 'attributesCount$' = completed attributesCount

FieldDescriptor ::= FieldType
FieldType       ::= BaseType
                  | ObjectType
                  | ArrayType
BaseType        ::= [BCDFIJSZ]
ObjectType      ::= 'L' ClassName ';'
ArrayType       ::= '[' ComponentType
ComponentType   ::= FieldType
