#!perl
use strict;
use warnings FATAL => 'all';
use Archive::Zip qw/:ERROR_CODES :CONSTANTS/;
use File::Basename qw/fileparse basename/;
use File::chdir;
use File::Find qw/find/;
use File::Spec qw/case_tolerant canonpath/;
use File::Temp qw/tempdir/;
use POSIX qw/EXIT_SUCCESS/;
use Log::Log4perl qw/:easy/;
use Log::Any::Adapter;
use Log::Any qw/$log/;
use Getopt::Long qw/GetOptions/;

my $loglevel = 'WARN';
my $help     = 0;
GetOptions('loglevel=s' => \$loglevel,
           'help!'      => \$help)
  || die "Error in command line arguments\n";
#
# Help
#
if ($help) {
  print <<USAGE;
Usage: javapp [--help] [--loglevel level] classfiles

where loglevel is a log4j-like level, like WARN, ERROR, TRACE, etc.
USAGE
  exit(EXIT_SUCCESS);
}
#
# Init log
#
our $defaultLog4perlConf = "
log4perl.rootLogger              = $loglevel, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr  = 1
log4perl.appender.Screen.layout  = PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %d %-5p %6P %m{chomp}%n
";
Log::Log4perl::init(\$defaultLog4perlConf);
Log::Any::Adapter->set('Log4perl');

require MarpaX::Java::ClassFile;

# PODNAME: classdump

# ABSTRACT: javap writen in perl

# VERSION

# AUTHORITY

my $case_tolerant = File::Spec->case_tolerant;
find({wanted => \&_wanted, no_chdir => 1}, @ARGV);

sub _wanted {
  #
  # Should look like a file
  #
  return if (! -f $_);
  #
  # ./.. that end with ".class", or ".jar"
  #
  my ($filename_without_suffix, $dirs, $suffix) = fileparse($_, qr/\.[^.]*/);
  $suffix = lc($suffix) if (! $case_tolerant);
  #
  # Try/catch that
  #
  my $canonpath = File::Spec->canonpath($_);
  if ($suffix eq '.class') {
    #
    # ".class"
    #
    eval { printf "%s\n", MarpaX::Java::ClassFile->new(filename => $canonpath)->ast }
  } elsif ($suffix eq '.jar') {
    #
    # ".jar"
    #
    local $CWD = tempdir(CLEANUP => 1);
    $log->debugf('Using temporary directory %s', $CWD);

    $log->debugf('Looking into %s', $canonpath);
    my $zip = Archive::Zip->new();
    if ($zip->read($canonpath) != AZ_OK) {
      $log->errorf('Cannot read %s, %s', $canonpath, $!)
    } else {
      foreach ($zip->memberNames()) {
        my ($filename_without_suffix, $dirs, $suffix) = fileparse($_, qr/\.[^.]*/);
        $suffix = lc($suffix) if (! $case_tolerant);
        if ($suffix eq '.class') {
          #
          # Note that this is naturally filtering directory members: in a zip
          # file directory members always end with a forward slash
          #
          # ".jar" -> ".class"
          #
          $log->debugf('Extracting %s', $_);
          if ($zip->extractMemberWithoutPaths($_) == AZ_OK) {
            eval { printf "%s\n", MarpaX::Java::ClassFile->new(filename => basename($_))->ast }
          } else {
            $log->warnf('Failed to extract %s from %s, %s', $_, $canonpath, $!)
          }
        }
      }
    }
    $log->debugf('Leaving %s', $CWD);
  }
}

exit(EXIT_SUCCESS);
