#!perl
use strict;
use warnings FATAL => 'all';
use MarpaX::Java::ClassFile::Data::Scan::Javap;
use MarpaX::Java::ClassFile;
use POSIX qw/EXIT_SUCCESS EXIT_FAILURE/;
use Log::Log4perl qw/:easy/;
use Log::Any::Adapter;
use Log::Any qw/$log/;
#
# Init log
#
our $defaultLog4perlConf = '
log4perl.rootLogger              = TRACE, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr  = 0
log4perl.appender.Screen.layout  = PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %d %-5p %6P %m{chomp}%n
';
Log::Log4perl::init(\$defaultLog4perlConf);
Log::Any::Adapter->set('Log4perl');

# PODNAME: javapp

# ABSTRACT: javap writen in perl

# VERSION

# AUTHORITY

my $consumer = MarpaX::Java::ClassFile::Data::Scan::Javap->new_with_options();

my $file = shift || '';
if (! $file) {
  print STDERR "Usage: $0 classFile\n";
  exit(EXIT_FAILURE);
}

my $ast = MarpaX::Java::ClassFile->parse($file);
Data::Scan->new(consumer => $consumer)->process($ast);

# print STDERR "CONSTANT_POOL_COUNT: " . $ast->constant_pool_count . "\n";
# use Data::Dumper::GUI; Dumper($ast);
# use Data::Dumper; print Dumper($ast);
# use Data::Scan::Printer; dspp($ast);

exit(EXIT_SUCCESS);
