#!perl
use strict;
use warnings FATAL => 'all';
use MarpaX::Java::ClassFile;
use Data::Scan::Printer;
use POSIX qw/EXIT_SUCCESS EXIT_FAILURE/;
use Log::Log4perl qw/:easy/;
use Log::Any::Adapter;
use Log::Any qw/$log/;
#
# Init log
#
our $defaultLog4perlConf = '
log4perl.rootLogger              = TRACE, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr  = 0
log4perl.appender.Screen.layout  = PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %d %-5p %6P %m{chomp}%n
';
Log::Log4perl::init(\$defaultLog4perlConf);
Log::Any::Adapter->set('Log4perl');

# PODNAME: javapp

# ABSTRACT: javap writen in perl

# VERSION

# AUTHORITY

my $file = shift || '';
if (! $file) {
  print STDERR "Usage: $0 classFile\n";
  exit(EXIT_FAILURE);
}
open(my $fh, '<', $file) || die "Cannot open $file, $!";
binmode($fh);
my $input = do { local $/; <$fh>};
close($fh) || warn "Cannot close $file, $!";
# hexdump($input);
dspp(MarpaX::Java::ClassFile->new(input => $input)->ast);

exit(EXIT_SUCCESS);
sub hexdump
{
    my $offset = 0;
    foreach my $chunk (unpack "(a16)*", $_[0])
    {
        my $hex = unpack "H*", $chunk; # hexadecimal magic
        $chunk =~ tr/ -~/./c;          # replace unprintables
        $hex   =~ s/(.{1,8})/$1 /gs;   # insert spaces
        printf "0x%08x (%05u)  %-*s %s\n",
            $offset, $offset, 36, $hex, $chunk;
        $offset += 16;
    }
  }
